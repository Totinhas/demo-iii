{"version":3,"sources":["utilities/index.js","App.js","serviceWorker.js","index.js"],"names":["padLeftWithZeroes","pos","str","char","repeat","slice","padLeftWithChar","App","useState","timerInterval","setTimerInterval","isBreak","loopCounter","time","timer","pomodoro","setPomodoro","timeout","useRef","useEffect","console","log","clearTimeout","current","setTimeout","className","ms","ss","Math","floor","mins","formatTime","onChange","e","target","value","type","min","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uPAaaA,G,MAAoB,SAACC,EAAKC,GAAN,OAHF,SAACC,EAAMF,EAAKC,GAAZ,OAC5BC,EAAKC,OAAOH,GAAOC,GAAKG,OAAOJ,GAEaK,CAAgB,IAAKL,EAAKC,KCmF1DK,EA5FH,WAAO,IAAD,EAC0BC,mBAAS,KADnC,mBACTC,EADS,KACMC,EADN,OAEgBF,mBAAS,CACvCG,SAAS,EACTC,YAAa,EACbC,KAAM,EACNC,OAAO,IANO,mBAETC,EAFS,KAECC,EAFD,KA0BVC,EAAUC,iBAAO,MA6CvB,OA3CAC,qBAAU,WACRC,QAAQC,IAAIN,EAAUN,GACtBa,aAAaL,EAAQM,SACrBN,EAAQM,QAAUC,YAAW,WAE3BJ,QAAQC,IAAI,cACRN,EAASD,QACPC,EAASJ,QACPI,EAASH,YAAc,EACrBG,EAASF,KAAO,IAClBG,EAAY,2BAAKD,GAAN,IAAgBF,KAAME,EAASF,KAAOJ,KAEjDO,EAAY,2BACPD,GADM,IAETJ,SAAS,EACTC,YAAaG,EAASH,YAAc,EACpCC,KAAM,KAINE,EAASF,KAAO,KAClBG,EAAY,2BAAKD,GAAN,IAAgBF,KAAME,EAASF,KAAOJ,KAEjDO,EAAY,CACVL,SAAS,EACTC,YAAa,EACbC,KAAM,EACNC,OAAO,IAKTC,EAASF,KAAO,KAClBG,EAAY,2BAAKD,GAAN,IAAgBF,KAAME,EAASF,KAAOJ,KAEjDO,EAAY,2BAAKD,GAAN,IAAgBJ,SAAS,EAAME,KAAM,QAKrDJ,KACF,CAACM,EAAUN,IAGZ,yBAAKgB,UAAU,OACb,yBAAKA,UAAU,SD7EK,SAACZ,GACzB,IAAMa,EAAKb,EAAO,IACZc,EAAKC,KAAKC,MAAMhB,EAAO,KAAQ,GAC/BiB,EAAOF,KAAKC,MAAMhB,EAAO,KAC/B,MAAM,GAAN,OAAUb,EAAkB,EAAG8B,GAA/B,YAAwC9B,EACtC,EACA2B,GAFF,YAGK3B,EAAkB,EAAG0B,ICsEEK,CAAWhB,EAASF,OAC5C,6CAAmBE,EAASD,MAAQ,KAAO,OAC3C,uDAEE,2BACEkB,SAtDqB,SAACC,GAAD,OAAOvB,GAAkBuB,EAAEC,OAAOC,QAuDvDC,KAAK,SACLD,MAAO1B,EACP4B,IAAK,KAGT,4BAAQC,QA5ES,WACnBlB,QAAQC,IAAI,eAAgBN,GAC5BC,EAAY,2BAAKD,GAAN,IAAgBD,OAAQC,EAASD,WA2EvCC,EAASD,MAAQ,QAAU,SAE9B,4BAAQwB,QA1EO,WACjBlB,QAAQC,IAAI,aAAcN,GAC1BC,EAAY,2BACPD,GADM,IAETJ,SAAS,EACTC,YAAa,EACbC,KAAM,EACNC,OAAO,OAmEP,WC/EcyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.a37a73e0.chunk.js","sourcesContent":["export const formatTime = (time) => {\n  const ms = time % 1000\n  const ss = Math.floor(time / 1000) % 60\n  const mins = Math.floor(time / 60000)\n  return `${padLeftWithZeroes(2, mins)}:${padLeftWithZeroes(\n    2,\n    ss,\n  )}:${padLeftWithZeroes(3, ms)}`\n}\n\nexport const padLeftWithChar = (char, pos, str) =>\n  (char.repeat(pos) + str).slice(-pos)\n\nexport const padLeftWithZeroes = (pos, str) => padLeftWithChar('0', pos, str)\n","import React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\nimport { formatTime } from \"./utilities\";\n\nconst App = () => {\n  const [timerInterval, setTimerInterval] = useState(1000);\n  const [pomodoro, setPomodoro] = useState({\n    isBreak: false,\n    loopCounter: 0,\n    time: 0,\n    timer: false,\n  });\n  const triggerTimer = () => {\n    console.log(\"triggerTimer\", pomodoro);\n    setPomodoro({ ...pomodoro, timer: !pomodoro.timer });\n  };\n\n  const resetTimer = () => {\n    console.log(\"resetTimer\", pomodoro);\n    setPomodoro({\n      ...pomodoro,\n      isBreak: false,\n      loopCounter: 0,\n      time: 0,\n      timer: false,\n    });\n  };\n\n  const onChangeTimeInterval = (e) => setTimerInterval(+e.target.value);\n\n  const timeout = useRef(null);\n\n  useEffect(() => {\n    console.log(pomodoro, timerInterval);\n    clearTimeout(timeout.current);\n    timeout.current = setTimeout(() => {\n      //logic\n      console.log(\"setTimeout\");\n      if (pomodoro.timer) {\n        if (pomodoro.isBreak) {\n          if (pomodoro.loopCounter < 2) {\n            if (pomodoro.time < 5000) {\n              setPomodoro({ ...pomodoro, time: pomodoro.time + timerInterval });\n            } else {\n              setPomodoro({\n                ...pomodoro,\n                isBreak: false,\n                loopCounter: pomodoro.loopCounter + 1,\n                time: 0,\n              });\n            }\n          } else {\n            if (pomodoro.time < 15000) {\n              setPomodoro({ ...pomodoro, time: pomodoro.time + timerInterval });\n            } else {\n              setPomodoro({\n                isBreak: false,\n                loopCounter: 0,\n                time: 0,\n                timer: false,\n              });\n            }\n          }\n        } else {\n          if (pomodoro.time < 25000) {\n            setPomodoro({ ...pomodoro, time: pomodoro.time + timerInterval });\n          } else {\n            setPomodoro({ ...pomodoro, isBreak: true, time: 0 });\n          }\n        }\n      }\n      //logic\n    }, timerInterval);\n  }, [pomodoro, timerInterval]);\n\n  return (\n    <div className=\"app\">\n      <div className=\"timer\">{formatTime(pomodoro.time)}</div>\n      <div>The timer is {pomodoro.timer ? \"on\" : \"off\"}</div>\n      <div>\n        Current timer interval:\n        <input\n          onChange={onChangeTimeInterval}\n          type=\"number\"\n          value={timerInterval}\n          min={4}\n        />\n      </div>\n      <button onClick={triggerTimer}>\n        {pomodoro.timer ? \"Pause\" : \"Start\"}\n      </button>\n      <button onClick={resetTimer}>Reset</button>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}